"""
This type stub file was generated by pyright.
"""

import os
import typing
from . import _tools, jupyter_integration, piping, rendering, saving, unflattening

"""Save DOT code objects, render with Graphviz dot, and open in viewer."""
__all__ = ['Source']
log = ...
class Source(rendering.Render, saving.Save, jupyter_integration.JupyterIntegration, piping.Pipe, unflattening.Unflatten):
    """Verbatim DOT source code string to be rendered by Graphviz.

    Args:
        source: The verbatim DOT source code string.
        filename: Filename for saving the source (defaults to ``'Source.gv'``).
        directory: (Sub)directory for source saving and rendering.
        format: Rendering output format (``'pdf'``, ``'png'``, ...).
        engine: Layout engine used (``'dot'``, ``'neato'``, ...).
        encoding: Encoding for saving the source.

    Note:
        All parameters except ``source`` are optional. All of them
        can be changed under their corresponding attribute name
        after instance creation.
    """
    @classmethod
    @_tools.deprecate_positional_args(supported_number=2)
    def from_file(cls, filename: typing.Union[os.PathLike, str], directory: typing.Union[os.PathLike, str, None] = ..., format: typing.Optional[str] = ..., engine: typing.Optional[str] = ..., encoding: typing.Optional[str] = ..., renderer: typing.Optional[str] = ..., formatter: typing.Optional[str] = ...) -> Source:
        """Return an instance with the source string read from the given file.

        Args:
            filename: Filename for loading/saving the source.
            directory: (Sub)directory for source loading/saving and rendering.
            format: Rendering output format (``'pdf'``, ``'png'``, ...).
            engine: Layout command used (``'dot'``, ``'neato'``, ...).
            encoding: Encoding for loading/saving the source.
        """
        ...
    
    @_tools.deprecate_positional_args(supported_number=2)
    def __init__(self, source: str, filename: typing.Union[os.PathLike, str, None] = ..., directory: typing.Union[os.PathLike, str, None] = ..., format: typing.Optional[str] = ..., engine: typing.Optional[str] = ..., encoding: typing.Optional[str] = ..., *, renderer: typing.Optional[str] = ..., formatter: typing.Optional[str] = ..., loaded_from_path: typing.Optional[os.PathLike] = ...) -> None:
        ...
    
    _source: str
    _loaded_from_path: typing.Optional[os.PathLike]
    def __iter__(self) -> typing.Iterator[str]:
        r"""Yield the DOT source code read from file line by line.

        Yields: Line ending with a newline (``'\n'``).
        """
        ...
    
    @property
    def source(self) -> str:
        """The DOT source code as string.

        Normalizes so that the string always ends in a final newline.
        """
        ...
    
    @_tools.deprecate_positional_args(supported_number=2)
    def save(self, filename: typing.Union[os.PathLike, str, None] = ..., directory: typing.Union[os.PathLike, str, None] = ..., *, skip_existing: typing.Optional[bool] = ...) -> str:
        """Save the DOT source to file. Ensure the file ends with a newline.

        Args:
            filename: Filename for saving the source (defaults to ``name`` + ``'.gv'``)
            directory: (Sub)directory for source saving and rendering.
            skip_existing: Skip write if file exists (default: ``None``).
                By default skips if instance was loaded from the target path:
                ``.from_file(self.filepath)``.

        Returns:
            The (possibly relative) path of the saved source file.
        """
        ...
    


