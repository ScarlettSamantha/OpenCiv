"""
This type stub file was generated by pyright.
"""

import typing
from . import _tools, base, quoting

"""Create DOT code with method-calls."""
__all__ = ['GraphSyntax', 'DigraphSyntax', 'Dot']
def comment(line: str) -> str:
    """Return comment header line."""
    ...

def graph_head(name: str) -> str:
    """Return DOT graph head line."""
    ...

def digraph_head(name: str) -> str:
    """Return DOT digraph head line."""
    ...

def graph_edge(*, tail: str, head: str, attr: str) -> str:
    """Return DOT graph edge statement line."""
    ...

def digraph_edge(*, tail: str, head: str, attr: str) -> str:
    """Return DOT digraph edge statement line."""
    ...

class GraphSyntax:
    """DOT graph head and edge syntax."""
    _head = ...
    _edge = ...


class DigraphSyntax:
    """DOT digraph head and edge syntax."""
    _head = ...
    _edge = ...


def subgraph(name: str) -> str:
    """Return DOT subgraph head line."""
    ...

def subgraph_plain(name: str) -> str:
    """Return plain DOT subgraph head line."""
    ...

def node(left: str, right: str) -> str:
    """Return DOT node statement line."""
    ...

class Dot(quoting.Quote, base.Base):
    """Assemble DOT source code."""
    directed: bool
    _comment = ...
    _tail = ...
    _subgraph = ...
    _subgraph_plain = ...
    _attr = ...
    def __init__(self, *, name: typing.Optional[str] = ..., comment: typing.Optional[str] = ..., graph_attr=..., node_attr=..., edge_attr=..., body=..., strict: bool = ..., **kwargs) -> None:
        ...

    @_tools.deprecate_positional_args(supported_number=1)
    def clear(self, keep_attrs: bool = ...) -> None:
        """Reset content to an empty body, clear graph/node/egde_attr mappings.

        Args:
            keep_attrs (bool): preserve graph/node/egde_attr mappings
        """
        ...

    @_tools.deprecate_positional_args(supported_number=1)
    def __iter__(self, subgraph: bool = ...) -> typing.Iterator[str]:
        r"""Yield the DOT source code line by line (as graph or subgraph).

        Yields: Line ending with a newline (``'\n'``).
        """
        ...

    @_tools.deprecate_positional_args(supported_number=3)
    def node(self, name: str, label: typing.Optional[str] = ..., _attributes=..., **attrs) -> None:
        """Create a node.

        Args:
            name: Unique identifier for the node inside the source.
            label: Caption to be displayed (defaults to the node ``name``).
            attrs: Any additional node attributes (must be strings).

        Attention:
            When rendering ``label``, backslash-escapes
            and strings of the form ``<...>`` have a special meaning.
            See the sections :ref:`backslash-escapes` and
            :ref:`quoting-and-html-like-labels` in the user guide for details.
        """
        ...

    @_tools.deprecate_positional_args(supported_number=4)
    def edge(self, tail_name: str, head_name: str, label: typing.Optional[str] = ..., _attributes=..., **attrs) -> None:
        """Create an edge between two nodes.

        Args:
            tail_name: Start node identifier
                (format: ``node[:port[:compass]]``).
            head_name: End node identifier
                (format: ``node[:port[:compass]]``).
            label: Caption to be displayed near the edge.
            attrs: Any additional edge attributes (must be strings).

        Note:
            The ``tail_name`` and ``head_name`` strings are separated
            by (optional) colon(s) into ``node`` name, ``port`` name,
            and ``compass`` (e.g. ``sw``).
            See :ref:`details in the User Guide <node-ports-compass>`.

        Attention:
            When rendering ``label``, backslash-escapes
            and strings of the form ``<...>`` have a special meaning.
            See the sections :ref:`backslash-escapes` and
            :ref:`quoting-and-html-like-labels` in the user guide for details.
        """
        ...

    def edges(self, tail_head_iter) -> None:
        """Create a bunch of edges.

        Args:
            tail_head_iter: Iterable of ``(tail_name, head_name)`` pairs
                (format:``node[:port[:compass]]``).


        Note:
            The ``tail_name`` and ``head_name`` strings are separated
            by (optional) colon(s) into ``node`` name, ``port`` name,
            and ``compass`` (e.g. ``sw``).
            See :ref:`details in the User Guide <node-ports-compass>`.
        """
        ...

    @_tools.deprecate_positional_args(supported_number=2)
    def attr(self, kw: typing.Optional[str] = ..., _attributes=..., **attrs) -> None:
        """Add a general or graph/node/edge attribute statement.

        Args:
            kw: Attributes target
                (``None`` or ``'graph'``, ``'node'``, ``'edge'``).
            attrs: Attributes to be set (must be strings, may be empty).

        See the :ref:`usage examples in the User Guide <attributes>`.
        """
        ...

    @_tools.deprecate_positional_args(supported_number=2)
    def subgraph(self, graph=..., name: typing.Optional[str] = ..., comment: typing.Optional[str] = ..., graph_attr=..., node_attr=..., edge_attr=..., body=...): # -> _GeneratorContextManager[Self] | None:
        """Add the current content of the given sole ``graph`` argument
            as subgraph or return a context manager
            returning a new graph instance
            created with the given (``name``, ``comment``, etc.) arguments
            whose content is added as subgraph
            when leaving the context manager's ``with``-block.

        Args:
            graph: An instance of the same kind
                (:class:`.Graph`, :class:`.Digraph`) as the current graph
                (sole argument in non-with-block use).
            name: Subgraph name (``with``-block use).
            comment: Subgraph comment (``with``-block use).
            graph_attr: Subgraph-level attribute-value mapping
                (``with``-block use).
            node_attr: Node-level attribute-value mapping
                (``with``-block use).
            edge_attr: Edge-level attribute-value mapping
                (``with``-block use).
            body: Verbatim lines to add to the subgraph ``body``
                (``with``-block use).

        See the :ref:`usage examples in the User Guide <subgraphs-clusters>`.

        When used as a context manager, the returned new graph instance
        uses ``strict=None`` and the parent graph's values
        for ``directory``, ``format``, ``engine``, and ``encoding`` by default.

        Note:
            If the ``name`` of the subgraph begins with
            ``'cluster'`` (all lowercase)
            the layout engine will treat it as a special cluster subgraph.
        """
        ...



