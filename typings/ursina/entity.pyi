"""
This type stub file was generated by pyright.
"""

from panda3d.core import NodePath
from ursina.ursinastuff import PostInitCaller
from ursina.scripts.property_generator import generate_properties_for_class

"""
This type stub file was generated by pyright.
"""
_Ursina_instance = ...
_warn_if_ursina_not_instantiated = ...
@generate_properties_for_class()
class Entity(NodePath, metaclass=PostInitCaller):
    rotation_directions = ...
    default_shader = ...
    default_values = ...
    def __init__(self, add_to_scene_entities=..., enabled=..., **kwargs) -> None:
        ...
    
    def __post_init__(self):
        ...
    
    def enable(self):
        ...
    
    def disable(self):
        ...
    
    def enabled_getter(self):
        ...
    
    def enabled_setter(self, value):
        ...
    
    def model_setter(self, value):
        ...
    
    def color_getter(self):
        ...
    
    def color_setter(self, value):
        ...
    
    def eternal_getter(self):
        ...
    
    def eternal_setter(self, value):
        ...
    
    def double_sided_setter(self, value):
        ...
    
    def render_queue_getter(self):
        ...
    
    def render_queue_setter(self, value):
        ...
    
    def parent_setter(self, value):
        ...
    
    def loose_parent_getter(self):
        ...
    
    def loose_parent_setter(self, value):
        ...
    
    def world_parent_getter(self):
        ...
    
    def world_parent_setter(self, value):
        ...
    
    @property
    def types(self):
        ...
    
    def visible_getter(self):
        ...
    
    def visible_setter(self, value):
        ...
    
    def visible_self_getter(self):
        ...
    
    def visible_self_setter(self, value):
        ...
    
    def collider_getter(self):
        ...
    
    def collider_setter(self, value):
        ...
    
    def collision_getter(self):
        ...
    
    def collision_setter(self, value):
        ...
    
    def on_click_getter(self):
        ...
    
    def on_click_setter(self, value):
        ...
    
    def origin_getter(self):
        ...
    
    def origin_setter(self, value):
        ...
    
    def origin_x_getter(self):
        ...
    
    def origin_x_setter(self, value):
        ...
    
    def origin_y_getter(self):
        ...
    
    def origin_y_setter(self, value):
        ...
    
    def origin_z_getter(self):
        ...
    
    def origin_z_setter(self, value):
        ...
    
    def world_position_getter(self):
        ...
    
    def world_position_setter(self, value):
        ...
    
    def world_x_getter(self):
        ...
    
    def world_y_getter(self):
        ...
    
    def world_z_getter(self):
        ...
    
    def world_x_setter(self, value):
        ...
    
    def world_y_setter(self, value):
        ...
    
    def world_z_setter(self, value):
        ...
    
    def position_getter(self):
        ...
    
    def position_setter(self, value):
        ...
    
    def x_getter(self):
        ...
    
    def x_setter(self, value):
        ...
    
    def y_getter(self):
        ...
    
    def y_setter(self, value):
        ...
    
    def z_getter(self):
        ...
    
    def z_setter(self, value):
        ...
    
    @property
    def X(self):
        ...
    
    @property
    def Y(self):
        ...
    
    @property
    def Z(self):
        ...
    
    def world_rotation_getter(self):
        ...
    
    def world_rotation_setter(self, value):
        ...
    
    def world_rotation_x_getter(self):
        ...
    
    def world_rotation_x_setter(self, value):
        ...
    
    def world_rotation_y_getter(self):
        ...
    
    def world_rotation_y_setter(self, value):
        ...
    
    def world_rotation_z_getter(self):
        ...
    
    def world_rotation_z_setter(self, value):
        ...
    
    def rotation_getter(self):
        ...
    
    def rotation_setter(self, value):
        ...
    
    def rotation_x_getter(self):
        ...
    
    def rotation_x_setter(self, value):
        ...
    
    def rotation_y_getter(self):
        ...
    
    def rotation_y_setter(self, value):
        ...
    
    def rotation_z_getter(self):
        ...
    
    def rotation_z_setter(self, value):
        ...
    
    def quaternion_getter(self):
        ...
    
    def quaternion_setter(self, value):
        ...
    
    def world_scale_getter(self):
        ...
    
    def world_scale_setter(self, value):
        ...
    
    def world_scale_x_getter(self):
        ...
    
    def world_scale_x_setter(self, value):
        ...
    
    def world_scale_y_getter(self):
        ...
    
    def world_scale_y_setter(self, value):
        ...
    
    def world_scale_z_getter(self):
        ...
    
    def world_scale_z_setter(self, value):
        ...
    
    def scale_getter(self):
        ...
    
    def scale_setter(self, value):
        ...
    
    def scale_x_getter(self):
        ...
    
    def scale_x_setter(self, value):
        ...
    
    def scale_y_getter(self):
        ...
    
    def scale_y_setter(self, value):
        ...
    
    def scale_z_getter(self):
        ...
    
    def scale_z_setter(self, value):
        ...
    
    def transform_getter(self):
        ...
    
    def transform_setter(self, value):
        ...
    
    def world_transform_getter(self):
        ...
    
    def world_transform_setter(self, value):
        ...
    
    @property
    def forward(self):
        ...
    
    @property
    def back(self):
        ...
    
    @property
    def right(self):
        ...
    
    @property
    def left(self):
        ...
    
    @property
    def up(self):
        ...
    
    @property
    def down(self):
        ...
    
    @property
    def screen_position(self):
        ...
    
    def shader_setter(self, value):
        ...
    
    def get_shader_input(self, name):
        ...
    
    def set_shader_input(self, name, value):
        ...
    
    def shader_input_getter(self):
        ...
    
    def shader_input_setter(self, value):
        ...
    
    def material_setter(self, value):
        ...
    
    def texture_setter(self, value):
        ...
    
    def texture_scale_getter(self):
        ...
    
    def texture_scale_setter(self, value):
        ...
    
    def texture_offset_getter(self):
        ...
    
    def texture_offset_setter(self, value):
        ...
    
    def tileset_size_getter(self):
        ...
    
    def tileset_size_setter(self, value):
        ...
    
    def tile_coordinate_getter(self):
        ...
    
    def tile_coordinate_setter(self, value):
        ...
    
    def alpha_getter(self):
        ...
    
    def alpha_setter(self, value):
        ...
    
    def always_on_top_setter(self, value):
        ...
    
    def unlit_setter(self, value):
        ...
    
    def billboard_setter(self, value):
        ...
    
    def wireframe_setter(self, value):
        ...
    
    def generate_sphere_map(self, size=..., name=...):
        ...
    
    def generate_cube_map(self, size=..., name=...):
        ...
    
    @property
    def model_bounds(self):
        ...
    
    @property
    def bounds(self):
        ...
    
    def get_position(self, relative_to=...):
        ...
    
    def set_position(self, value, relative_to=...):
        ...
    
    def rotate(self, value, relative_to=...):
        ...
    
    def add_script(self, class_instance):
        ...
    
    def combine(self, analyze=..., auto_destroy=..., ignore=...):
        ...
    
    def flipped_faces_setter(self, value):
        ...
    
    def look_at(self, target, axis=..., up=...):
        ...
    
    def look_at_2d(self, target, axis=...):
        ...
    
    def look_at_xy(self, target):
        ...
    
    def look_at_xz(self, target):
        ...
    
    def has_ancestor(self, possible_ancestor):
        ...
    
    def has_disabled_ancestor(self):
        ...
    
    def children_getter(self):
        ...
    
    def children_setter(self, value):
        ...
    
    def loose_children_getter(self):
        ...
    
    @property
    def attributes(self):
        ...
    
    def __str__(self) -> str:
        ...
    
    def get_changes(self, target_class=...):
        ...
    
    def __repr__(self):
        ...
    
    def __deepcopy__(self, memo):
        ...
    
    def animate(self, name, value, duration=..., delay=..., curve=..., loop=..., resolution=..., interrupt=..., time_step=..., unscaled=..., auto_play=..., auto_destroy=...):
        ...
    
    def animate_position(self, value, duration=..., **kwargs):
        ...
    
    def animate_rotation(self, value, duration=..., **kwargs):
        ...
    
    def animate_scale(self, value, duration=..., **kwargs):
        ...
    
    def shake(self, duration=..., magnitude=..., speed=..., direction=..., delay=..., attr_name=..., interrupt=..., unscaled=...):
        ...
    
    def animate_color(self, value, duration=..., interrupt=..., unscaled=..., **kwargs):
        ...
    
    def fade_out(self, value=..., duration=..., unscaled=..., **kwargs):
        ...
    
    def fade_in(self, value=..., duration=..., **kwargs):
        ...
    
    def blink(self, value=..., duration=..., delay=..., curve=..., interrupt=..., **kwargs):
        ...
    
    def intersects(self, traverse_target=..., ignore: list = ..., debug=...):
        ...
    


if __name__ == '__main__':
    app = ...
    e = ...
    class Player(Entity):
        def __init__(self, **kwargs) -> None:
            ...
        
        def input(self, key):
            ...
        
        def update(self):
            ...
        
    
    
    player = ...
    e = ...
