"""
This type stub file was generated by pyright.
"""

from enum import Enum
from ursina import *

"""
This type stub file was generated by pyright.
"""
class Keys(Enum):
    left_mouse_down = ...
    left_mouse_up = ...
    middle_mouse_down = ...
    middle_mouse_up = ...
    right_mouse_down = ...
    right_mouse_up = ...
    double_click = ...
    scroll_up = ...
    scroll_down = ...
    left_arrow = ...
    left_arrow_up = ...
    up_arrow = ...
    up_arrow_up = ...
    down_arrow = ...
    down_arrow_up = ...
    right_arrow = ...
    right_arrow_up = ...
    left_control = ...
    right_control = ...
    left_shift = ...
    right_shift = ...
    left_alt = ...
    right_alt = ...
    left_control_up = ...
    right_control_up = ...
    left_shift_up = ...
    right_shift_up = ...
    left_alt_up = ...
    right_alt_up = ...
    page_down = ...
    page_down_up = ...
    page_up = ...
    page_up_up = ...
    enter = ...
    backspace = ...
    escape = ...
    tab = ...
    gamepad_left_stick_x = ...
    gamepad_left_stick_y = ...
    gamepad_right_stick_x = ...
    gamepad_right_stick_y = ...
    gamepad_left_trigger = ...
    gamepad_right_trigger = ...
    gamepad_a = ...
    gamepad_a_up = ...
    gamepad_b = ...
    gamepad_b_up = ...
    gamepad_x = ...
    gamepad_x_up = ...
    gamepad_y = ...
    gamepad_y_up = ...
    gamepad_left_stick = ...
    gamepad_left_stick_up = ...
    gamepad_right_stick = ...
    gamepad_right_stick_up = ...
    gamepad_back = ...
    gamepad_back_up = ...
    gamepad_start = ...
    gamepad_dpad_down = ...
    gamepad_dpad_down_up = ...
    gamepad_dpad_up = ...
    gamepad_dpad_up_up = ...
    gamepad_dpad_left = ...
    gamepad_dpad_left_up = ...
    gamepad_dpad_right = ...
    gamepad_dpad_right_up = ...
    gamepad_left_shoulder = ...
    gamepad_left_shoulder_up = ...
    gamepad_right_shoulder = ...
    gamepad_right_shoulder_up = ...
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


held_keys = ...
rebinds = ...
def bind(original_key, alternative_key):
    ...

def unbind(key):
    ...

def rebind(to_key, from_key):
    ...

def input(key):
    ...

def get_combined_key(key):
    '''
    Adds control, shift and alt prefix to key.
    Example: holding control and pressing 'f' would result in 'control+f'.
    This makes it easier to check for a specific combination without manually
    checking each combination of held_keys['control'], held_keys['shift'] and held_keys['alt'].
    '''
    ...

if __name__ == '__main__':
    app = ...
    def input(key):
        ...
    
